// Ripped from https://github.com/Ch0pin/medusa/ and modified to fit Androguard packets

colorLog('[+] LOADING HELPER/ANTIDEBUG/ENVIRONMENT.JS',{c: Color.Red});

var a_activity = Java.use('android.app.Activity');

a_activity.isTaskRoot.implementation=function(){
    agSysPacket({information: "overwriting isTaskRoot"}).send();
    return true;
}

var hook = Java.use('android.provider.Settings$Secure');

var overloadCount1 = hook['getInt'].overloads.length;

for (var i = 0; i < overloadCount1; i++) {
hook['getInt'].overloads[i].implementation = function() {
    colorLog('*** entered ' +'android.provider.Settings$Secure.getInt',{ c: Color.Green });
     //console.log('[i] Setting fetched:' + arguments[1]);
    var retval = this['getInt'].apply(this, arguments);
    var param = arguments[1];
    if(param==='development_settings_enabled' || param == 'adb_enabled')
    {
        agSysPacket({information: "AntiDebug technique detected", param: param}).send();
        return 0;

    }
        
    return retval;
    }
}


var RootProperties = {
    "ro.build.selinux": "0",
    "ro.debuggable": "0",
    "service.adb.root": "0",
    "ro.secure": "1"
};

var RootPropertiesKeys = [];

for (var k in RootProperties) RootPropertiesKeys.push(k);

var String = Java.use('java.lang.String');

var SystemProperties = Java.use('android.os.SystemProperties');

var BufferedReader = Java.use('java.io.BufferedReader');

var StringBuffer = Java.use('java.lang.StringBuffer');

var loaded_classes = Java.enumerateLoadedClassesSync();

console.log("Loaded " + loaded_classes.length + " classes!");

var useKeyInfo = false;

var KeyInfo = null;

if (loaded_classes.indexOf('android.security.keystore.KeyInfo') != -1) {
    try {
        useKeyInfo = true;
        var KeyInfo = Java.use('android.security.keystore.KeyInfo');
    } catch (err) {
        console.log("KeyInfo Hook failed: " + err);
    }
} else {
    console.log("KeyInfo hook not loaded");
}


if (useKeyInfo) {
    KeyInfo.isInsideSecureHardware.implementation = function() {
        console.log("Bypass isInsideSecureHardware");
        return true;
    }
}

String.contains.implementation = function(name) {
    if (name == "test-keys") {
        console.log("Bypass test-keys check");
        return false;
    }
    return this.contains.call(this, name);
};

var get = SystemProperties.get.overload('java.lang.String');

get.implementation = function(name) {
    if (RootPropertiesKeys.indexOf(name) != -1) {
        console.log("Bypass " + name);
        return RootProperties[name];
    }
    return this.get.call(this, name);
};


BufferedReader.readLine.overloads[0].implementation = function() {
    var text = this.readLine.call(this);
    if (text === null) {
        // just pass , i know it's ugly as hell but test != null won't work :(
    } else {
        var shouldFakeRead = (text.indexOf("ro.build.tags=test-keys") > -1);
        if (shouldFakeRead) {
            console.log("Bypass build.prop file read");
            text = text.replace("ro.build.tags=test-keys", "ro.build.tags=release-keys");
        }
    }
    return text;
};

BufferedReader.readLine.overloads[1].implementation = function(boolean_) {
    var text = this.readLine(boolean_);
    if (text === null) {
        // just pass , i know it's ugly as hell but test != null won't work :(
    } else {
        var shouldFakeRead = (text.indexOf("ro.build.tags=test-keys") > -1);
        if (shouldFakeRead) {
            console.log("Bypass build.prop file read");
            text = text.replace("ro.build.tags=test-keys", "ro.build.tags=release-keys");
        }
    }
    return text;
};